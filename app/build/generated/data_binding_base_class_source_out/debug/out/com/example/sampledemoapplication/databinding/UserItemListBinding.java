// Generated by view binder compiler. Do not edit!
package com.example.sampledemoapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.sampledemoapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UserItemListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView deleteBtn;

  @NonNull
  public final ImageView editBtn;

  @NonNull
  public final TextView emailTV;

  @NonNull
  public final TextView genderTV;

  @NonNull
  public final TextView mobileNoTV;

  @NonNull
  public final TextView userNameTV;

  private UserItemListBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView deleteBtn,
      @NonNull ImageView editBtn, @NonNull TextView emailTV, @NonNull TextView genderTV,
      @NonNull TextView mobileNoTV, @NonNull TextView userNameTV) {
    this.rootView = rootView;
    this.deleteBtn = deleteBtn;
    this.editBtn = editBtn;
    this.emailTV = emailTV;
    this.genderTV = genderTV;
    this.mobileNoTV = mobileNoTV;
    this.userNameTV = userNameTV;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UserItemListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UserItemListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.user_item_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UserItemListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deleteBtn;
      ImageView deleteBtn = ViewBindings.findChildViewById(rootView, id);
      if (deleteBtn == null) {
        break missingId;
      }

      id = R.id.editBtn;
      ImageView editBtn = ViewBindings.findChildViewById(rootView, id);
      if (editBtn == null) {
        break missingId;
      }

      id = R.id.emailTV;
      TextView emailTV = ViewBindings.findChildViewById(rootView, id);
      if (emailTV == null) {
        break missingId;
      }

      id = R.id.genderTV;
      TextView genderTV = ViewBindings.findChildViewById(rootView, id);
      if (genderTV == null) {
        break missingId;
      }

      id = R.id.mobileNoTV;
      TextView mobileNoTV = ViewBindings.findChildViewById(rootView, id);
      if (mobileNoTV == null) {
        break missingId;
      }

      id = R.id.userNameTV;
      TextView userNameTV = ViewBindings.findChildViewById(rootView, id);
      if (userNameTV == null) {
        break missingId;
      }

      return new UserItemListBinding((ConstraintLayout) rootView, deleteBtn, editBtn, emailTV,
          genderTV, mobileNoTV, userNameTV);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
